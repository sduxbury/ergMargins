library(ergmTestR)
library(statnet)
library(btergm)
data("faux.mesa.high")
faux.mesa.high
set.seed(21093)
my.ergm1<-ergm(faux.mesa.high~edges+
nodecov("Grade")+
nodefactor("Race")+
nodefactor("Sex")+
nodematch("Grade")+
nodematch("Sex")+
nodematch("Race"),
estimate = "MLE")
summary(my.ergm1)
set.seed(21093)
my.ergm2<-ergm(faux.mesa.high~edges+
nodecov("Grade")+
nodefactor("Race")+
nodefactor("Sex")+
nodematch("Grade")+
nodematch("Sex")+
nodematch("Race")+
gwesp(.5,fixed=T))
summary(my.ergm2)
ergm.mediate(my.ergm1,my.ergm2,mediator="gwesp.fixed.0.5",
direct.effect=names(my.ergm1$coef[8]),
seed=21093)
ergm.mma(my.ergm1,my.ergm2,mediator="gwesp.fixed.0.5",
direct.effect=names(my.ergm1$coef[8]))
#------------------------------------------------------------------------
#                Moderation analysis example
#------------------------------------------------------------------------
library(statnet)
data("faux.dixon.high")
faux.dixon.high
set.seed(21093)
my.ergm<-ergm(faux.dixon.high~edges+
nodeicov("grade")+
nodeocov("grade")+
nodeifactor("race")+
nodeofactor("race")+
nodeifactor("sex")+
nodeofactor("sex")+
absdiff("grade")+
nodematch("sex")+
mutual,
ergm.control=control.ergm(parallel=4,
parallel.type="PSOCK"))
summary(my.ergm)
grade.inter<-ergm.AME(my.ergm,"nodeicov.grade","nodeocov.grade","absdiff.grade")
sex.inter<-ergm.AME(my.ergm,"nodeifactor.sex.2","nodeofactor.sex.2","nodematch.sex")
grade.inter
sex.inter
grade.inter<-ergm.MEM(my.ergm,"nodeicov.grade","nodeocov.grade","absdiff.grade")
vif.ergm(my.ergm)
vif.ergm(my.ergm1)
vif.ergm(my.ergm2)
a<-edge.prob2(faux.mesa.high)
a<-edge.prob2(my.ergm)
head(a)
my.ergm
faux.mesa.high
203*202
410006/2
?ergm.mediate
?ergm.mma
library(ergmTestR)
?ergm.mediate
?ergm.mma
library(ergmTestR)
library(ergmTestR)
library(statnet)
library(btergm)
?ergmMEM
?ergm.mma
?ergm.mediate
?ergmAME
?vif.ergm
?edge.prob2
?tergmprepare
library(ergmTestR)
library(ergmTestR)
library(ergmTestR)
library(statnet)
library(btergm)
?ergm.mediate
?ergmAME
?ergm.mma
library(ergmTestR)
library(ergmTestR)
?ergm.mediate
?ergmMEM
?ergm.mediate
?ergm.mediate
library(ergmTestR)
library(ergmTestR)
?ergm.mediate
library(ergmTestR)
?ergm.mediate
?ergm.mma
library(ergmTestR)
?vif.ergm
browseVignettes("ergm")
devtools::check()
error()
a<-devtools::check()
names(a)
a$errors
a$warnings
library(ergmTestR)
devtools::check()
a<-devtools::check()
names(a)
a$errors
a$warnings
library(ergmTestR)
?ergm.mediate
library(ergmTestR)
?ergm.mediate
library(ergmTestR)
?ergm.mediate
library(ergmTestR)
library(ergmTestR)
?ergm.mediate
?ergm.AME
library(ergmTestR)
?ergm.AME
?ergm.MEM
library(ergmTestR)
?ergm.AME
?ergm.mediate
?ergm.mma
?vif.ergm
?ergm.AME
?ergm.MEM
?ergm.AME
library(ergmTestR)
?ergm.mediate
?ergm.mma
?vif.ergm
?ergm.AME
?ergm.MEM
?edge.prob2
?tergmprepare
?ergm.mediate
?ergm.mma
?ergm.mediate
?ergm.AME
library(ergmTestR)
?ergm.AME
library(ergmTestR)
library(ergmTestR)
?ergm.AME
?vif.ergm
devtools::use_vignette("ergmTestR-vignette")
install.packages("rmarkdown")
devtools::use_vignette("ergmTestR-vignette")
library(ergmTestR)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ergmTestR)
---
title: "ergmTestR-vignette"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{ergmTestR-vignette}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
```
```{r setup}
library(ergmTestR)
```
library(ergmTestR)
?ergm.mediate
library(ergmTestR)
head(a[,"gwesp.fixed.0.5"])
library(ergmTestR)
#' Mediation function to compute indirect effects and standard errors of indirect effects in ERGM
#' Computes indirect effect through standardization; standard errors are Monte Carlo SEs
#' @param restricted.model is the ergm without the mediator
#' @param full.model is the restricted model + the mediating variable
#' @param mediator is the name of the mediator variable, a character string
#' @direct.effect is the name of the direct effect variable, a character string
#' @MC.sample is the number of monte carlo samples used to compute the standard error of the indirect effect. Default is 50,000
#' @return.MC.sample dictates whether to return the MC sample of the indirect effect. Defaults to F
#' @seed is an optionoal seed value for replication purposes. Defaults to NULL
#' ergm.mediate()
ergm.mediate<-function(restricted.model,full.model,mediator,
direct.effect,MC.sample=50000,
return.MC.sample=F,seed=NULL){
r.direct.effect<-restricted.model$coef[direct.effect]
p.direct.effect<-full.model$coef[direct.effect]
med.effect<-full.model$coef[mediator]
log.err<-(pi^2)/3
if(ergm::is.dyad.independent(restricted.model)){
colnames(restricted.model$covar)<-rownames(restricted.model$covar)<-names(restricted.model$coef)
}
if(ergm::is.dyad.independent(full.model)){
colnames(full.model$covar)<-rownames(full.model$covar)<-names(full.model$coef)
}
r.dyads<-edge.prob2(restricted.model)
f.dyads<-edge.prob2(full.model)
r.std<-cor(r.dyads$probability,r.dyads$tie)*sd(r.dyads$probability)*sd(r.dyads[,direct.effect])
f.std<-cor(f.dyads$probability,f.dyads$tie)*sd(f.dyads$probability)*sd(f.dyads[,direct.effect])
direct.s<-r.direct.effect*r.std
direct.sp<-p.direct.effect*f.std
####calculate indirect effect
indirect<-direct.s-direct.sp
proportion.mediated<-1-(direct.sp/(indirect+direct.sp))
total.effect<-indirect+direct.sp
#calculate standard error and significance
#compute scaled standard error
std.err.s<-sqrt(diag(restricted.model$covar)[direct.effect])*r.std
std.err.sp<-sqrt(diag(full.model$covar)[direct.effect])*f.std
#simulate distribution
#standardize covariance
s.cov<-diag(restricted.model$covar)[direct.effect]*r.std*f.std
s.mat<-matrix(c(std.err.s^2,s.cov,
s.cov,std.err.sp^2),2,2,byrow=T)
ev <- eigen(s.mat, symmetric = TRUE)$values
if (!all(ev >= -1e-100 * abs(ev[1L]))){
warning("Covariance matrix for direct and partial effects is not positive definite. MC standard error may be unreliable. Consider using ergm.mma.")
}
if(!is.null(seed)){
set.seed(seed)
}
#this function is a wrapper from MASS::mvrnorm
#ERGMs usually have far higher correlations than GLMs, which can lead to matrices that would
#usually be considered non-posiitve definite, but are not an issue in ERGM
#this function simply removes the error handling component in the native mvrnorm funciton
#it is otherwise identical
mvrnorm2<-function (n = 1, mu, Sigma, tol = 1e-100, empirical = FALSE, EISPACK = FALSE)
{
p <- length(mu)
if (!all(dim(Sigma) == c(p, p)))
stop("incompatible arguments")
if (EISPACK)
stop("'EISPACK' is no longer supported by R", domain = NA)
eS <- eigen(Sigma, symmetric = TRUE)
ev <- eS$values
X <- matrix(rnorm(p * n), n)
if (empirical) {
X <- scale(X, TRUE, FALSE)
X <- X %*% svd(X, nu = 0)$v
X <- scale(X, FALSE, TRUE)
}
X <- drop(mu) + eS$vectors %*% diag(sqrt(pmax(ev, 0)), p) %*%
t(X)
nm <- names(mu)
if (is.null(nm) && !is.null(dn <- dimnames(Sigma)))
nm <- dn[[1L]]
dimnames(X) <- list(nm, NULL)
if (n == 1)
drop(X)
else t(X)
}
dist<-mvrnorm2(MC.sample,mu = c(0,0),Sigma=s.mat,tol=1e-100)
direct.s.dist<-dist[,1]
direct.p.dist<-dist[,2]
#compute indirect and total effectseffect
indirect.dist<-direct.s.dist-direct.p.dist
total.dist<-indirect.dist+direct.p.dist
#calculate p values and standard errors
p.val<-length(indirect.dist>indirect)/MC.sample
se.indirect<-sd(indirect.dist,na.rm = T)
z.ind<-indirect/se.indirect
p.val.indirect<-2*pnorm(-abs(z.ind))
se.total<-sd(total.dist,na.rm = T)
z.tot<-total.effect/se.total
p.val.total<-2*pnorm(-abs(z.tot))
se.direct<-sd(direct.p.dist,na.rm=T)
direct.z<-p.direct.effect/se.direct
p.val.direct<-2*pnorm(-abs(direct.z))
mediate.results<-matrix(signif(c(total.effect,direct.sp,indirect,proportion.mediated,
se.total,se.direct,se.indirect,NA,
p.val.total,p.val.direct,p.val.indirect,NA),digits=3),byrow=T,nr=3,nc=4)
colnames(mediate.results)<-c("Total effect","Direct effect", "Indirect effect", "Proportion mediated" )
rownames(mediate.results)<-c("Effect","MC Std. Err.", "MC p-value")
attr(mediate.results,"description")<-paste(direct.effect,"mediated by",mediator)
message("Note that all effects are standardized coefficients, not raw estimates.")
if(return.MC.sample==T){
mediate.results<-list(main.results=mediate.results,
direct.effect.distribution=direct.p.dist,
indirect.effect.distribution=indirect.dist,
total.effect.distribution=total.dist)
}
mediate.results
}
library(ergmTestR)
library(ergmTestR)
library(ergmTestR)
rm(ergm.mediate)
library(ergmTestR)
library(ergmTestR)
sqrt(0)
library(ergmTestR)
library(ergmTestR)
dim(third.diff.se)
a<-1
dim(a)
length(a)
library(ergmTestR)
?ergm.mod.mma
library(ergMargins)
library(ergMargins)
library(ergMargins)
devtools::check()
a<-devtools::check()
a
a$errors
a$warnings
library(ergMargins)
a<-devtools::check()
names(a)
a$warnings
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
a<-devtools::check()
summary(a)
a$errors
a$warnings
library(ergMargins)
library(ergMargins)
library(ergMargins)
library(ergMargins)
Sys.which("git")
